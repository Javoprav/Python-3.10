# импорты
from utils import load_words, load_random_word
from basic_word import BasicWord
from players import Player

# функция основного цикла
def main():
    user_name = input('Ввведите имя игрока: ')
    player = Player(user_name)
    print(f'Привет, {user_name}!')
    
    basic_word = load_random_word()
    
    print(f'Составьте {basic_word.len_subwords()} слов из слова {basic_word.original_word}')
    print(f'Слова должны быть не короче 3 букв')
    print('Чтобы закончить игру, угадайте все слова или напишите "stop"')
    print('Поехали, ваше первое слово?: ')
    count = 0
    while count < basic_word.len_subwords():
        user_input = input('Ввод: ')
        if str(user_input) == "stop".lower() or str(user_input) == 'стоп'.lower():
            print(f'Игра завершена, вы угадали {player.get_words_used()}!')
            quit('программа завершена')
        elif len(user_input) < 3:
            print('слишком короткое слово')
        elif user_input not in basic_word.subswords:
            print('неверно')
        elif player.check_word_before(user_input):
            print('уже использовано')
        else:
            if user_input in basic_word.subswords:
                player.add_words_used(user_input)
                print('верно')
        count += 1

print(main())

'''Глеб Хомутов
(ред.) 27.12.22 17:43
Максим, привет!
Получил и проверил твою работу!
✅ Переменные, методы и функции названы удачно				
✅ Импорты написаны верно				
✅ Файлы с модулями названы верно				
❌ В каждой функции и методе требуется докстринг, текст в тройных кавычках, рассказывающий о том, что делает и как работает функция или метод. Именно в каждой функции и именно в тройных кавычках!		
✅ Код программы прокомментирован				
✅ PEP8 соблюдается				
✅ Пути к файлам с данными верно вынесены в отдельную константу или отдельный файл с конфигурацией	
✅ Блоки программы разделены пустой строчкой				
✅ Программа верно разделена на функции и классы.  Хорошо, что ты разделяешь программу на несколько файлов!				
✅ Внутри класса слова есть инициализатор				
✅ Внутри класса слова есть метод проверки введенного слова				
✅ Внутри класса слова есть метод возвращающий количество подслов				
✅ Внутри класса слова есть __repr__				
✅ Внутри класса игрока Player реализован инициализатор				
✅ Внутри класса игрока Player реализован метод получения количества использованных слов			
✅ Внутри класса игрока Player реализован метод добавления слова в использованные 				
✅ Внутри класса игрока Player реализован метод проверки использованности слова				
✅ Внутри класса слова Player есть __repr__				
✅ Функция загружает данные с внешнего сайта или из файла	
✴️ Функция load_random_word написана в целом верно, но можно решить немного изящнее:
def load_random_word(source_path):
"""
Возврашает основное слово в виде экземпляра BasicWord
"""
response = requests.get(source_path)
raw_json = response.json()
raw_word = random.choice(raw_json)
word = raw_word["word"]
subwords = raw_word["subwords"]
return BasicWord(word, subwords)		
"✴️ Основной цикл в целом написан верно, но можно немного улучшить. Чтобы сделать код более читабельным.
Например так: 
    # Если пользователь остановил игру:
    if user_attempt == ""stop"":

        break

    # Если пользователь ввел короткое слово:

    elif len(user_attempt) < 3:

        print(""Слово какое-то короткое, уходи"")


    # Если слова вообще нет:

    elif not original_word.check_word():

        print(""Такого слова нет!"")


    # Если пользователь повторно ввел слово:

    elif player.has_used_word(user_attempt):

        print(""Такого слово уже было использовано!"")

        continue

    # Наконец, если все нормально:

    else:

        print(""Такое слово есть!"")

        player.add_word(user_attempt)"				

✅ Программа реагирует на stop				
✅ Программа реагирует на верные слова				
✅ Программа реагирует на повторный ввод слова				
✅ Программа реагирует на неверные слова				
✅ Статистика считается верно				

Курсовая принята!'''